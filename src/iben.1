.TH IBEN 1 "March 2003" "Version 1.1"
.SH NAME
iben \- Interactive BDD Environment
.SH SYNOPSIS
.B iben
.SH DESCRIPTION

IBEN provides an interactive interface to Jørn Lind-Nielsen's BUDDY
BDD package. IBEN is loosely based on a similar tool in David Long's
BDD package with minor modifications to accommodate differences
between the packages.

The program reads commands from standard input using the readline
library (which provides editing and command history facilities) and
writes to standard output.

.SH SYNTAX

IBEN uses the semicolon as a command separator (like Pascal), not as a
command terminator (like C). This means that lines do not have to be
terminated in interactive mode. The available commands are:

.nf
Creating variables:
	vars <id> <id> ...
	Create some new boolean variables and assign them to the
	identifiers given by <id>s.

Variable assignment:
	<id> := <expr>
	Evaluates an expression and assigns the result to <id>.
	Any previous definition of <id> is lost.  The syntax of
	expressions is defined below.

Clear:
	clear all 
	clear <id> <id> ...
	Deletes all definitions or the definitions of the specified
	identifiers.  The first form also restarts the BDD package.

Printing:
	print <expr>
        Print all satisfying assignments.
	show <expr>
        Show the BDD representing the expression as a graph. This
        requires access to a postscript viewer.

Sizes:
	size <expr> <expr> ...
	Print the number of BDD nodes used in representing the given
	expressions.

Getting satisfying assignments:
	satisfy <expr>
	Find and print a satisfying assignment for the expression.

Getting valuation counts:
	satcount <expr>
	Prints the number of valuations that make the expressions TRUE.

Setting the node limit:
	limit <number> 
	limit none
	Set the BDD node limit to the indicated number of nodes, or
	get rid of the node limit.  If the number of nodes gets bigger
	than <number> during an operation, the operation will be
	aborted. 

Help:
        View this file

Timing things:
	timer 
	timer off 
	The first form either starts the timer, or prints the elapsed
	CPU time since the timer was started and since the last timer
	command.  The second form prints the elapsed times and also
	stops the timer.

Including files:
        load <filename>
        were <filename> is the filename in double quotes, e.g. 

          load "myfile"

        This can be used as a simple procedure call mechanism.
 
Quitting:
	quit
	In interactive mode quit will terminate the program. 

Expression syntax:
	<id>
		a boolean variable
	0
		FALSE
	1
		TRUE
	( <expr> )
	<expr1> & <expr2>
	<expr1> * <expr2>
		conjunction
	<expr1> | <expr2>
	<expr1> + <expr2>
		disjunction
	<expr1> = <expr2>
		equivalence
	<expr1> ^ <expr2>
		exclusive or
        <expr1> => <expr2>
                implies
	! <expr>
	~ <expr>
		negation
	exists <expr> ( <expr> )
		existential quantification over variables, e.g.

                    exists x & y (a) 
   
                will perform existential quantification of x and y 
                in a.

	forall <expr>  ( <expr> )
		universal quantification over variables (see exists)
	subst <assoc> ( <expr> )
		<expr> with the variables in <assoc> replaced by their
		associated expressions

Variable association syntax:
	[ <id> / <id> <id> / <id> ... ]
		an association between pairs of variables. Typically
		used for simultaneous substitution. For instance 
			subst [ x / y ] (f) 
		will replace all occurrences of y in f with x.
.fi
.SH AUTHOR
Written by Gerd Behrmann.

.SH REPORTING BUGS
Report bugs using the bug reporting interface at 
http://sourceforge.net/projects/iben. 

.SH COPYRIGHT
Copyright (C) 2003 Gerd Behrmann.

This  is  free  software;  see  the  source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
 

 
